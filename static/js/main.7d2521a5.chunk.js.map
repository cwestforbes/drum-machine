{"version":3,"sources":["redux/core.ts","redux/action-creators.ts","redux/reducers/instruments-reducer.ts","redux/reducers/root-reducer.ts","redux/reducers/playback-reducer.ts","redux/selectors.ts","utils/audio-utils.ts","redux/sagas/playback-sagas.ts","redux/sagas/root-saga.ts","redux/audio-middleware.ts","redux/store.ts","components/row-item.tsx","components/mute.tsx","components/instrument-row.tsx","components/channel-rack.tsx","components/play.tsx","components/stop.tsx","components/tempo.tsx","components/transport-controls.tsx","components/drum-face-container.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["INITIAL_STATE","instruments","reduce","acc","title","file","beats","Array","from","length","val","index","id","toString","on","isMuted","isPlaying","SET_SELECT_BEAT","SET_TOGGLE_IS_PLAYING","SET_INSTRUMENT_IS_MUTED","HANDLE_START_PLAYBACK","HANDLE_STOP_PLAYBACK","HANDLE_MUTE_SOUND","HANDLE_SELECT_BEAT","PLAY_SOUND","UNLOCK_TONE","SETUP_LOOP","STOP_SOUND","MUTE_SOUND","GET_PLAYER","SET_CANCEL_TRANSPORT","SET_TEMPO","selectBeat","params","type","setToggleIsPlaying","handleStartPlayback","handleStopPlayback","handleMuteSound","handleSelectBeat","playSound","unlockTone","setupLoop","drumPatterns","stopSound","muteSound","getPlayer","setInstrumentIsMuted","setTransportCancel","setTempo","bpm","setBeats","state","slice","Number","setIsMuted","reducerMap","action","rootReducer","combineReducers","getIsPlaying","getInstruments","getIsMuted","instrument","createDrumPatterns","Object","keys","drumPattern","beat","player","part","Tone","time","start","setupPart","loop","players","a","mute","get","put","actions","select","isPlayingState","call","sagas","takeEvery","sagaRoot","sagaMiddleware","createSagaMiddleware","audioMiddlewareForStore","kit","drumKitPlayers","Kick","Snare","Hihat","Clap","toMaster","api","next","forEach","stop","cancel","timeSignature","value","audioMiddleware","store","createStore","applyMiddleware","run","RowItem","props","cssProp","css","onClick","muteButton","generateButtonColor","Mute","rowItemStyles","instrumentRowContainer","instrumentRowContainerInner","instrumentTitleContainer","instrumentTitleText","InstrumentRow","genOnOffColor","beatOn","renderRow","map","i","opacity","backgroundColor","key","this","Component","transportContainer","transportContainerBackground","ChannelRack","instrumentRow","renderRows","button","playIcon","pauseIcon","pauseIconBar","Play","handleSetToggleIsPlaying","renderPlayPauseButton","stopIcon","Stop","tempoInput","Tempo","useState","setBpm","timeout","useRef","interval","modifyBpm","operation","document","getElementById","valToNumber","parseInt","modifiedNumber","modifyNumber","String","numVal","includes","increment","num","decrement","setTimers","modify","current","window","setTimeout","setInterval","clearTimers","clearTimeout","clearInterval","onChange","e","target","handleBpm","onMouseDown","nativeEvent","offsetY","mouseDownBpm","onMouseUp","onMouseLeave","min","max","readOnly","TransportControlsContainer","TransportControlsContainerInner","TransportControls","appContainer","appHeader","connect","actionCreators","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7d2521a5.chunk.js","sourcesContent":["export interface Beat {\n  on: boolean;\n  id: string;\n}\n\nexport type Beats = ReadonlyArray<Beat>;\n\nexport type DrumPattern = ReadonlyArray<ReadonlyArray<string>>;\n\nexport type DrumPatterns = {\n  [key: string]: DrumPattern;\n};\n\nexport type Drumkit = {\n  [key: string]: string;\n};\n\nexport interface Instrument {\n  title: string;\n  file: string;\n  beats: Beats;\n  isMuted: boolean;\n}\n\nexport interface Instruments {\n  [title: string]: Instrument;\n}\n\nexport interface SelectBeatParams {\n  id: string;\n  title: string;\n  on: boolean;\n}\n\nexport type IsPlaying = boolean;\n\nexport interface AppState {\n  instruments: Instruments;\n  isPlaying: IsPlaying;\n}\n\nconst titles: ReadonlyArray<string> = [\"Kick\", \"Clap\", \"Hihat\", \"Snare\"];\n\nexport interface Context {\n  resume: () => Promise<never>;\n}\n\nexport interface Player {\n  start: (time: number) => void;\n  dispose: () => void;\n  context: Context;\n  mute: boolean;\n}\n\nexport type Players = {\n  [title: string]: Player;\n} & {\n  get: (title: string) => Player;\n};\n\nexport interface Part {\n  loop: boolean;\n  start: (time: number) => void;\n}\n\nconst createdBeats = (): Beats => {\n  return Array.from({ length: 16 }, (val, index) => {\n    return {\n      id: index.toString(),\n      on: false,\n    };\n  });\n};\n\nconst initialInstruments: Instruments = titles.reduce(\n  (acc: Instruments, title: string) => {\n    return {\n      ...acc,\n      [title]: {\n        title,\n        file: \"\",\n        beats: createdBeats(),\n        isMuted: false,\n      },\n    };\n  },\n  {}\n);\n\nconst AppStateRecord: AppState = {\n  instruments: initialInstruments,\n  isPlaying: false,\n};\n\nexport const INITIAL_STATE: AppState = AppStateRecord;\n","import { IsPlaying, SelectBeatParams, DrumPatterns } from \"./core\";\n\nexport const SET_SELECT_BEAT = \"SET_SELECT_BEAT\";\nexport const SET_TOGGLE_IS_PLAYING = \"SET_TOGGLE_IS_PLAYING\";\nexport const SET_INSTRUMENT_IS_MUTED = \"SET_INSTRUMENT_IS_MUTED\";\nexport const HANDLE_START_PLAYBACK = \"HANDLE_START_PLAYBACK\";\nexport const HANDLE_STOP_PLAYBACK = \"HANDLE_STOP_PLAYBACK\";\nexport const HANDLE_MUTE_SOUND = \"HANDLE_MUTE_SOUND\";\nexport const HANDLE_SELECT_BEAT = \"HANDLE_SELECT_BEAT\";\nexport const PLAY_SOUND = \"PLAY_SOUND\";\nexport const UNLOCK_TONE = \"UNLOCK_TONE\";\nexport const SETUP_LOOP = \"SETUP_LOOP\";\nexport const STOP_SOUND = \"STOP_SOUND\";\nexport const MUTE_SOUND = \"MUTE_SOUND\";\nexport const GET_PLAYER = \"GET_PLAYER\";\nexport const SET_CANCEL_TRANSPORT = \"SET_CANCEL_TRANSPORT\";\nexport const SET_TEMPO = \"SET_TEMPO\";\n\n// TYPES AND INTERFACES\ninterface SelectBeatAction {\n  type: typeof SET_SELECT_BEAT;\n  params: SelectBeatParams;\n}\n\ninterface PlaySoundAction {\n  type: typeof PLAY_SOUND;\n}\n\ninterface UnlockToneAction {\n  type: typeof UNLOCK_TONE;\n}\n\ninterface SetupLoopAction {\n  type: typeof SETUP_LOOP;\n  drumPatterns: DrumPatterns;\n}\n\ninterface StopSoundAction {\n  type: typeof STOP_SOUND;\n}\n\nexport interface SetToggleIsPlaying {\n  type: typeof SET_TOGGLE_IS_PLAYING;\n  isPlaying: IsPlaying;\n}\n\nexport interface HandleMuteSoundAction {\n  type: typeof HANDLE_MUTE_SOUND;\n  title: string;\n}\n\ninterface HandleStartPlaybackAction {\n  type: typeof HANDLE_START_PLAYBACK;\n}\n\ninterface HandleStopPlaybackAction {\n  type: typeof HANDLE_STOP_PLAYBACK;\n}\n\nexport interface HandleSelectBeatAction {\n  type: typeof HANDLE_SELECT_BEAT;\n  params: SelectBeatParams;\n}\n\ninterface MuteSoundAction {\n  type: typeof MUTE_SOUND;\n  title: string;\n}\n\ninterface GetPlayerAction {\n  type: typeof GET_PLAYER;\n  title: string;\n}\n\nexport interface SetInstrumentIsMutedAction {\n  type: typeof SET_INSTRUMENT_IS_MUTED;\n  isMuted: boolean;\n  title: string;\n}\n\ninterface SetCancelTransportAction {\n  type: typeof SET_CANCEL_TRANSPORT;\n}\n\ninterface SetTempoAction {\n  type: typeof SET_TEMPO;\n  bpm: number;\n}\n\n// ACTION CREATORS\n\nexport const selectBeat = (params: SelectBeatParams): SelectBeatAction => {\n  return {\n    type: SET_SELECT_BEAT,\n    params,\n  };\n};\n\nexport const setToggleIsPlaying = (\n  isPlaying: IsPlaying\n): SetToggleIsPlaying => {\n  return { type: SET_TOGGLE_IS_PLAYING, isPlaying };\n};\n\nexport const handleStartPlayback = (): HandleStartPlaybackAction => {\n  return {\n    type: HANDLE_START_PLAYBACK,\n  };\n};\n\nexport const handleStopPlayback = (): HandleStopPlaybackAction => {\n  return {\n    type: HANDLE_STOP_PLAYBACK,\n  };\n};\n\nexport const handleMuteSound = (title: string): HandleMuteSoundAction => {\n  return {\n    type: HANDLE_MUTE_SOUND,\n    title,\n  };\n};\n\nexport const handleSelectBeat = (\n  params: SelectBeatParams\n): HandleSelectBeatAction => {\n  return {\n    type: HANDLE_SELECT_BEAT,\n    params,\n  };\n};\n\nexport const playSound = (): PlaySoundAction => {\n  return {\n    type: PLAY_SOUND,\n  };\n};\n\nexport const unlockTone = (): UnlockToneAction => {\n  return {\n    type: UNLOCK_TONE,\n  };\n};\n\nexport const setupLoop = (drumPatterns: DrumPatterns): SetupLoopAction => {\n  return {\n    type: SETUP_LOOP,\n    drumPatterns,\n  };\n};\n\nexport const stopSound = (): StopSoundAction => {\n  return {\n    type: STOP_SOUND,\n  };\n};\n\nexport const muteSound = (title: string): MuteSoundAction => {\n  return {\n    type: MUTE_SOUND,\n    title,\n  };\n};\n\nexport const getPlayer = (title: string): GetPlayerAction => {\n  return {\n    type: GET_PLAYER,\n    title,\n  };\n};\n\nexport const setInstrumentIsMuted = (\n  isMuted: boolean,\n  title: string\n): SetInstrumentIsMutedAction => {\n  return {\n    type: SET_INSTRUMENT_IS_MUTED,\n    isMuted,\n    title,\n  };\n};\n\nexport const setTransportCancel = (): SetCancelTransportAction => {\n  return {\n    type: SET_CANCEL_TRANSPORT,\n  };\n};\n\nexport const setTempo = (bpm: number): SetTempoAction => {\n  return {\n    type: SET_TEMPO,\n    bpm,\n  };\n};\n\nexport type DrumMachineActionTypes =\n  | SelectBeatAction\n  | SetToggleIsPlaying\n  | SetInstrumentIsMutedAction\n  | HandleStartPlaybackAction\n  | HandleStopPlaybackAction\n  | HandleMuteSoundAction\n  | HandleSelectBeatAction\n  | PlaySoundAction\n  | UnlockToneAction\n  | SetupLoopAction\n  | StopSoundAction\n  | MuteSoundAction\n  | GetPlayerAction\n  | SetCancelTransportAction\n  | SetTempoAction;\n","import { INITIAL_STATE, Instruments, SelectBeatParams } from \"../core\";\nimport {\n  SET_SELECT_BEAT,\n  SET_INSTRUMENT_IS_MUTED,\n  DrumMachineActionTypes,\n} from \"../action-creators\";\n\nconst setBeats = (\n  state: Instruments,\n  params: SelectBeatParams\n): Instruments => {\n  const newState = {\n    ...state,\n    [params.title]: {\n      ...state[params.title],\n      beats: [\n        ...state[params.title].beats.slice(0, Number(params.id)),\n        { on: !params.on, id: params.id },\n        ...state[params.title].beats.slice(Number(params.id) + 1),\n      ],\n    },\n  };\n  return newState;\n};\n\nconst setIsMuted = (\n  state: Instruments,\n  isMuted: boolean,\n  title: string\n): Instruments => {\n  const newState = { ...state, [title]: { ...state[title], isMuted } };\n  return newState;\n};\n\nconst instruments = (\n  state: Instruments = INITIAL_STATE.instruments,\n  action: DrumMachineActionTypes\n): Instruments => {\n  switch (action.type) {\n    case SET_SELECT_BEAT:\n      return setBeats(state, action.params);\n    case SET_INSTRUMENT_IS_MUTED:\n      return setIsMuted(state, action.isMuted, action.title);\n    default:\n      return state;\n  }\n};\n\nexport default instruments;\n","import { combineReducers, Reducer, ReducersMapObject } from \"redux\";\nimport instruments from \"./instruments-reducer\";\nimport isPlaying from \"./playback-reducer\";\n\nconst reducerMap: ReducersMapObject = { instruments, isPlaying };\nconst rootReducer: Reducer = combineReducers(reducerMap);\n\nexport default rootReducer;\n","import { INITIAL_STATE, IsPlaying } from \"../core\";\nimport {\n  SET_TOGGLE_IS_PLAYING,\n  DrumMachineActionTypes,\n} from \"../action-creators\";\n\nconst setToggleIsPlaying = (isPlaying: IsPlaying): IsPlaying => {\n  return isPlaying;\n};\n\nconst playback = (\n  state: IsPlaying = INITIAL_STATE.isPlaying,\n  action: DrumMachineActionTypes\n): IsPlaying => {\n  switch (action.type) {\n    case SET_TOGGLE_IS_PLAYING:\n      return setToggleIsPlaying(action.isPlaying);\n    default:\n      return state;\n  }\n};\n\nexport default playback;\n","import { AppState, IsPlaying, Beats, Instruments } from \"./core\";\n\nexport function getIsPlaying(state: AppState): IsPlaying {\n  return state.isPlaying;\n}\n\nexport function getBeats(state: AppState, instrument: string): Beats {\n  return state.instruments[instrument].beats;\n}\n\nexport function getInstruments(state: AppState): Instruments {\n  return state.instruments;\n}\n\nexport function getIsMuted(state: AppState, instrument: string): boolean {\n  return state.instruments[instrument].isMuted;\n}\n","import {\n  Beat,\n  Beats,\n  DrumPattern,\n  DrumPatterns,\n  Instruments,\n  Player,\n  Players,\n  Drumkit,\n  Part,\n} from \"../redux/core\";\nimport * as Tone from \"tone\";\n\n// UNLOCK TONE\nexport const unlockTone = (): void => Tone.start();\n\n// CREATE DRUM PATTERN\nexport const createDrumPattern = (beats: Beats): DrumPattern => {\n  return beats.reduce((acc: DrumPattern, beat: Beat): DrumPattern => {\n    if (beat.on) {\n      const drumPatternBeat = [...acc, [`0:0:${beat.id}`]];\n      return drumPatternBeat;\n    }\n    return acc;\n  }, []);\n};\n\nexport const createDrumPatterns = (instruments: Instruments): DrumPatterns => {\n  return Object.keys(instruments).reduce(\n    (acc: DrumPatterns, instrument: string) => {\n      const drumPattern: DrumPattern = createDrumPattern(\n        instruments[instrument].beats\n      );\n      return {\n        ...acc,\n        [instrument]: drumPattern,\n      };\n    },\n    {}\n  );\n};\n\n// PLAY SOUND\nexport const playSound = (player: Player | null, time: number = 0): void => {\n  if (player) {\n    player.start(time);\n  }\n};\n\nexport const playSounds = (\n  players: Players,\n  drumPatterns: DrumPatterns\n): void => {\n  if (players) {\n    Object.keys(drumPatterns).forEach((player: string): void => {\n      setupLoop(players.get(player), drumPatterns[player]);\n    });\n  }\n};\n\n// TRANSPORT\nexport const transportStart = (): void => {\n  Tone.Transport.start(\"+0.1\");\n};\n\nexport const transportStop = (): void => {\n  Tone.Transport.stop();\n  Tone.Transport.cancel();\n};\n\nexport const transportCancel = (): void => {\n  Tone.Transport.cancel();\n};\n\nexport const setTransportBPM = (bpm: number): void => {\n  Tone.Transport.timeSignature = 4;\n  Tone.Transport.bpm.value = bpm;\n};\n\n// SETUP\nexport const setupSound = (url: string): Player => {\n  Tone.immediate();\n  const player = new Tone.Player(url).toMaster();\n  return player;\n};\n\nexport const setupDrumKit = (kit: Drumkit): Players => {\n  const players = new Tone.Players(kit).toMaster();\n  return players;\n};\n\nconst setupPart = (player: Player | null, drumPattern: DrumPattern): Part => {\n  const part = new Tone.Part((time: number) => {\n    playSound(player, time);\n  }, drumPattern);\n  return part;\n};\n\nexport const setupLoop = (\n  player: Player | null,\n  drumPattern: DrumPattern\n): void => {\n  const part: Part = setupPart(player, drumPattern);\n\n  part.loop = true;\n  part.start(0);\n};\n\nexport const muteSound = async (\n  players: Players,\n  title: string\n): Promise<void> => {\n  const player: Player = await getPlayer(players, title);\n  player.mute = await !player.mute;\n};\n\nexport const getPlayer = (players: Players, title: string): Player => {\n  const player: Player = players.get(title);\n  return player;\n};\n","import { put, select, call } from \"redux-saga/effects\";\nimport { SagaIterator } from \"redux-saga\";\nimport { Instruments, DrumPatterns, IsPlaying } from \"../../redux/core\";\nimport * as actions from \"../action-creators\";\nimport { getIsPlaying, getInstruments, getIsMuted } from \"../selectors\";\nimport { createDrumPatterns } from \"../../utils/audio-utils\";\n\nexport function* handleStartPlayback(): SagaIterator {\n  // Resume audio context for Tone JS\n  yield put(actions.unlockTone());\n\n  const isPlayingState: IsPlaying = yield select(getIsPlaying);\n  yield put(actions.setToggleIsPlaying(!isPlayingState));\n\n  const instruments: Instruments = yield select(getInstruments);\n  const drumPatterns: DrumPatterns = yield call(\n    createDrumPatterns,\n    instruments\n  );\n  const isCurrentPlayState: IsPlaying = yield select(getIsPlaying);\n\n  if (isCurrentPlayState) {\n    yield put(actions.setupLoop(drumPatterns));\n    yield put(actions.playSound());\n  } else {\n    yield put(actions.stopSound());\n  }\n}\n\nexport function* handleStopPlayback(): SagaIterator {\n  yield put(actions.setToggleIsPlaying(false));\n  yield put(actions.stopSound());\n}\n\nexport function* handleMuteSound(\n  action: actions.HandleMuteSoundAction\n): SagaIterator {\n  const { title } = action;\n  const isMuted: boolean = yield select(getIsMuted, title);\n\n  yield put(actions.setInstrumentIsMuted(!isMuted, title));\n  yield put(actions.muteSound(title));\n}\n\nexport function* handleSelectBeat(\n  action: actions.HandleSelectBeatAction\n): SagaIterator {\n  yield put(actions.setTransportCancel());\n  yield put(actions.selectBeat(action.params));\n\n  const instruments: Instruments = yield select(getInstruments);\n  const drumPatterns: DrumPatterns = yield call(\n    createDrumPatterns,\n    instruments\n  );\n\n  yield put(actions.setupLoop(drumPatterns));\n}\n","import { takeEvery } from \"redux-saga/effects\";\nimport { SagaIterator } from \"redux-saga\";\nimport {\n  handleStartPlayback,\n  handleStopPlayback,\n  handleMuteSound,\n  handleSelectBeat,\n} from \"./playback-sagas\";\n\nexport function* sagas(): SagaIterator {\n  return [\n    // playback\n    yield takeEvery(\"HANDLE_START_PLAYBACK\", handleStartPlayback),\n    yield takeEvery(\"HANDLE_STOP_PLAYBACK\", handleStopPlayback),\n    yield takeEvery(\"HANDLE_MUTE_SOUND\", handleMuteSound),\n    yield takeEvery(\"HANDLE_SELECT_BEAT\", handleSelectBeat),\n  ];\n}\n","import {\n  setupDrumKit,\n  transportStart,\n  transportStop,\n  unlockTone,\n  playSounds,\n  muteSound,\n  getPlayer,\n  transportCancel,\n  setTransportBPM,\n} from \"../utils/audio-utils\";\nimport { Drumkit, Players } from \"./core\";\nimport { Dispatch, Middleware, MiddlewareAPI } from \"redux\";\nimport { DrumMachineActionTypes } from \"./action-creators\";\n\nexport const audioMiddleware = (): Middleware => {\n  const drumKit: Drumkit = {\n    Kick: \"./kick.wav\",\n    Snare: \"./snare.wav\",\n    Hihat: \"./hihat.wav\",\n    Clap: \"./clap.wav\",\n  };\n  const drumKitPlayers: Players = setupDrumKit(drumKit);\n\n  const audioMiddlewareInner: Middleware = (api: MiddlewareAPI<Dispatch>) => (\n    next: Dispatch<DrumMachineActionTypes>\n  ) => (action: DrumMachineActionTypes) => {\n    switch (action.type) {\n      case \"UNLOCK_TONE\":\n        unlockTone();\n        break;\n      case \"SETUP_LOOP\":\n        playSounds(drumKitPlayers, action.drumPatterns);\n        break;\n      case \"PLAY_SOUND\":\n        transportStart();\n        break;\n      case \"STOP_SOUND\":\n        transportStop();\n        break;\n      case \"MUTE_SOUND\":\n        muteSound(drumKitPlayers, action.title);\n        break;\n      case \"GET_PLAYER\":\n        return getPlayer(drumKitPlayers, action.title);\n      case \"SET_CANCEL_TRANSPORT\":\n        transportCancel();\n        break;\n      case \"SET_TEMPO\":\n        setTransportBPM(action.bpm);\n        break;\n      default:\n        break;\n    }\n    return next(action);\n  };\n  return audioMiddlewareInner;\n};\n","import { createStore, applyMiddleware, Middleware, Store } from \"redux\";\nimport createSagaMiddleware, { SagaMiddleware, SagaIterator } from \"redux-saga\";\nimport { call } from \"redux-saga/effects\";\nimport rootReducer from \"./reducers/root-reducer\";\nimport { sagas } from \"./sagas/root-saga\";\nimport { audioMiddleware } from \"./audio-middleware\";\n\nfunction* sagaRoot(): SagaIterator {\n  yield call(sagas);\n}\n\nconst sagaMiddleware: SagaMiddleware = createSagaMiddleware();\nconst audioMiddlewareForStore: Middleware = audioMiddleware();\nconst store: Store<{}> = createStore(\n  rootReducer,\n  applyMiddleware(sagaMiddleware, audioMiddlewareForStore)\n);\nsagaMiddleware.run(sagaRoot);\n\nexport default store;\n","/** @jsx jsx */\nimport { jsx, SerializedStyles } from \"@emotion/core\";\nimport { SelectBeatParams } from \"../redux/core\";\n\ninterface RowItemProps {\n  cssProp: SerializedStyles[];\n  on: boolean;\n  id: string;\n  title: string;\n  handleSelectBeat: (params: SelectBeatParams) => void;\n}\n\nconst selectBeat = (\n  params: SelectBeatParams,\n  handleSelectBeat: (params: SelectBeatParams) => void\n) => {\n  handleSelectBeat(params);\n};\n\nconst RowItem = (props: RowItemProps): JSX.Element => {\n  const { cssProp, on, id, title, handleSelectBeat } = props;\n  return (\n    <div\n      css={cssProp}\n      onClick={() => selectBeat({ id, title, on }, handleSelectBeat)}\n    />\n  );\n};\n\nexport default RowItem;\n","/** @jsx jsx */\nimport { css, jsx, SerializedStyles } from \"@emotion/core\";\n\ninterface MuteProps {\n  title: string;\n  handleMuteSound: (title: string) => void;\n  isMuted: boolean;\n}\n\nconst muteButton: SerializedStyles = css`\n  border: 1px solid black;\n  outline: none;\n  width: 10px;\n  display: block;\n  height: 10px;\n  border-radius: 50%;\n  cursor: pointer;\n  margin-right: 10px;\n`;\n\nconst generateButtonColor = (isMuted: boolean): SerializedStyles => {\n  return isMuted\n    ? css`\n        background-color: grey;\n      `\n    : css`\n        background-color: #a2eb34;\n      `;\n};\n\nconst Mute = (props: MuteProps) => {\n  const { title, handleMuteSound, isMuted } = props;\n  return (\n    <div\n      onClick={() => handleMuteSound(title)}\n      css={[muteButton, generateButtonColor(isMuted)]}\n    ></div>\n  );\n};\n\nexport default Mute;\n","/** @jsx jsx */\nimport { css, jsx, SerializedStyles } from \"@emotion/core\";\nimport { Beats, Beat, SelectBeatParams } from \"../redux/core\";\nimport { Component } from \"react\";\nimport RowItem from \"./row-item\";\nimport Mute from \"./mute\";\n\ninterface InstrumentRowProps {\n  title: string;\n  beats: Beats;\n  isMuted: boolean;\n  handleMuteSound: (title: string) => void;\n  handleSelectBeat: (params: SelectBeatParams) => void;\n}\n\nconst rowItemStyles: SerializedStyles = css`\n  width: 30px;\n  height: 40px;\n  margin-right: 5px;\n  margin-left: 5px;\n  border-radius: 5px;\n  margin-bottom: 5px;\n  margin-top: 5px;\n  cursor: pointer;\n`;\n\nconst instrumentRowContainer: SerializedStyles = css`\n  display: flex;\n  flex-direction: row;\n  margin-bottom: 10px;\n  justify-content: center;\n`;\n\nconst instrumentRowContainerInner: SerializedStyles = css`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  height: 45px;\n`;\n\nconst instrumentTitleContainer: SerializedStyles = css`\n  min-width: 120px;\n  border: 1px solid #5c5c5c;\n  height: 40px;\n  border-radius: 5px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #473d3d;\n  margin-right: 5px;\n`;\n\nconst instrumentTitleText: SerializedStyles = css`\n  font-size: 14px;\n`;\n\nclass InstrumentRow extends Component<InstrumentRowProps> {\n  genOnOffColor = (beatOn: boolean): number => {\n    return beatOn ? 0.4 : 1;\n  };\n\n  renderRow = (): JSX.Element[] => {\n    const { beats, title, handleSelectBeat } = this.props;\n\n    return beats.map((beat: Beat, i: number) => {\n      const opacity = this.genOnOffColor(beat.on);\n      const backgroundColor: SerializedStyles =\n        i < 4 || (i > 7 && i < 12)\n          ? css`\n              background-color: #473d3d;\n              opacity: ${opacity};\n            `\n          : css`\n              background-color: #6b2b2b;\n              opacity: ${opacity};\n            `;\n      return (\n        <RowItem\n          cssProp={[rowItemStyles, backgroundColor]}\n          key={`${beat.id}`}\n          on={beat.on}\n          id={beat.id}\n          title={title}\n          handleSelectBeat={handleSelectBeat}\n        />\n      );\n    });\n  };\n\n  render(): JSX.Element {\n    const { title, handleMuteSound, isMuted } = this.props;\n    return (\n      <div css={instrumentRowContainer}>\n        <div css={instrumentRowContainerInner}>\n          <Mute\n            title={title}\n            handleMuteSound={handleMuteSound}\n            isMuted={isMuted}\n          />\n          <div css={instrumentTitleContainer}>\n            <p css={instrumentTitleText}>{title}</p>\n          </div>\n          {this.renderRow()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default InstrumentRow;\n","/** @jsx jsx */\nimport { css, jsx, SerializedStyles } from \"@emotion/core\";\nimport InstrumentRow from \"./instrument-row\";\nimport { Instruments, SelectBeatParams, Instrument } from \"../redux/core\";\n\ninterface ChannelRackProps {\n  instruments: Instruments;\n  handleMuteSound: (title: string) => void;\n  handleSelectBeat: (params: SelectBeatParams) => void;\n}\n\nconst transportContainer: SerializedStyles = css`\n  display: \"flex\";\n  justify-content: \"center\";\n  align-items: \"center\";\n`;\n\nconst transportContainerBackground: SerializedStyles = css`\n  width: 770px;\n  height: 300px;\n  border: 1px solid darkgrey;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding-top: 10px;\n  padding-left: 20px;\n  padding-right: 20px;\n  background-color: #6e6e6e;\n`;\n\nconst ChannelRack = (props: ChannelRackProps): JSX.Element => {\n  const renderRows = (): JSX.Element[] => {\n    const { instruments, handleMuteSound, handleSelectBeat } = props;\n\n    return Object.keys(instruments).map((instrument: string, i: number) => {\n      const instrumentRow: Instrument = instruments[instrument];\n      return (\n        <InstrumentRow\n          title={instrumentRow.title}\n          beats={instrumentRow.beats}\n          isMuted={instrumentRow.isMuted}\n          key={`${instrumentRow.title}row${i}`}\n          handleMuteSound={handleMuteSound}\n          handleSelectBeat={handleSelectBeat}\n        />\n      );\n    });\n  };\n\n  return (\n    <div css={transportContainer}>\n      <div css={transportContainerBackground}>{renderRows()}</div>\n    </div>\n  );\n};\n\nexport default ChannelRack;\n","/** @jsx jsx */\nimport { css, jsx, SerializedStyles } from \"@emotion/core\";\nimport { IsPlaying } from \"../redux/core\";\n\ninterface PlayProps {\n  handleStartPlayback: () => void;\n  isPlaying: IsPlaying;\n}\n\nconst button: SerializedStyles = css`\n  width: 87.5px;\n  height: 60px;\n  border-right: 1px solid grey;\n  display: flex;\n  background-color: #473d3d;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  outline: none;\n`;\n\nconst playIcon: SerializedStyles = css`\n  width: 0;\n  height: 0;\n  border-top: 10px solid transparent;\n  border-left: 20px solid white;\n  border-bottom: 10px solid transparent;\n`;\n\nconst pauseIcon: SerializedStyles = css`\n  width: 12px;\n  height: 15px;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n`;\n\nconst pauseIconBar: SerializedStyles = css`\n  width: 4px;\n  height: 15px;\n  background-color: white;\n`;\n\nconst handleSetToggleIsPlaying = (handleStartPlayback: () => void): void => {\n  handleStartPlayback();\n};\n\nconst renderPlayPauseButton = (isPlaying: boolean): JSX.Element => {\n  return !isPlaying ? (\n    <div css={playIcon} />\n  ) : (\n    <div css={pauseIcon}>\n      <div css={pauseIconBar} />\n      <div css={pauseIconBar} />\n    </div>\n  );\n};\n\nconst Play = (props: PlayProps) => {\n  const { handleStartPlayback, isPlaying } = props;\n  return (\n    <button\n      css={button}\n      onClick={() => {\n        handleSetToggleIsPlaying(handleStartPlayback);\n      }}\n    >\n      {renderPlayPauseButton(isPlaying)}\n    </button>\n  );\n};\n\nexport default Play;\n","/** @jsx jsx */\nimport { css, jsx, SerializedStyles } from \"@emotion/core\";\n\ninterface StopProps {\n  handleStopPlayback: () => void;\n}\n\nconst button: SerializedStyles = css`\n  width: 87.5px;\n  height: 60px;\n  background-color: #473d3d;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  outline: none;\n`;\n\nconst stopIcon: SerializedStyles = css`\n  width: 15px;\n  height: 15px;\n  background-color: white;\n`;\n\nconst Stop = (props: StopProps): JSX.Element => {\n  const { handleStopPlayback } = props;\n  return (\n    <button css={button} onClick={() => handleStopPlayback()}>\n      <div css={stopIcon} />\n    </button>\n  );\n};\n\nexport default Stop;\n","/** @jsx jsx */\nimport { useState, ChangeEvent, MouseEvent, useRef } from \"react\";\nimport { css, jsx, SerializedStyles } from \"@emotion/core\";\n\ninterface TempoProps {\n  setTempo: (bpm: number) => void;\n}\n\nconst tempoInput: SerializedStyles = css`\n  box-sizing: border-box;\n  height: 55px;\n  width: 75px;\n  padding: 7px 0;\n  outline: none;\n  font-size: 20px;\n  appearance: none;\n  display: flex;\n  text-align: right;\n  cursor: row-resize;\n`;\n\nconst Tempo = (props: TempoProps) => {\n  const { setTempo } = props;\n  const [bpm, setBpm] = useState<string>(\"120\");\n  const timeout = useRef<number | undefined>();\n  const interval = useRef<number | undefined>();\n\n  const modifyBpm = (operation: (num: number) => number): void => {\n    const val = (document.getElementById(\"tempo-input\") as HTMLInputElement)\n      .value;\n    const valToNumber: number = parseInt(val, 10);\n    const modifiedNumber: number = modifyNumber(valToNumber, operation);\n\n    if (valToNumber >= 10 && valToNumber <= 500) {\n      setBpm(String(modifiedNumber));\n      setTempo(Number(modifiedNumber));\n    }\n  };\n\n  const modifyNumber = (\n    numVal: number,\n    operation: (num: number) => number\n  ): number => {\n    return (numVal === 10 && operation.toString().includes(\"+\")) ||\n      (numVal === 500 && operation.toString().includes(\"-\")) ||\n      (numVal > 10 && numVal < 500)\n      ? operation(numVal)\n      : numVal;\n  };\n\n  const increment = (num: number): number => {\n    return num + 1;\n  };\n\n  const decrement = (num: number): number => {\n    return num - 1;\n  };\n\n  const handleBpm = (e: ChangeEvent<HTMLInputElement>): void => {\n    setBpm(e.target.value);\n    setTempo(Number(e.target.value));\n  };\n\n  const setTimers = (\n    modify: (operation: (num: number) => number) => void,\n    operation: (num: number) => number\n  ): void => {\n    timeout.current = window.setTimeout(() => {\n      interval.current = window.setInterval(() => {\n        modify(operation);\n      }, 60);\n    }, 300);\n  };\n\n  const mouseDownBpm = (e: MouseEvent<HTMLInputElement>) => {\n    if (e.nativeEvent.offsetY >= -2 && e.nativeEvent.offsetY <= 19) {\n      setTimers(modifyBpm, increment);\n    } else {\n      setTimers(modifyBpm, decrement);\n    }\n  };\n\n  const clearTimers = (): void => {\n    window.clearTimeout(timeout.current);\n    window.clearInterval(interval.current);\n  };\n  return (\n    <input\n      id=\"tempo-input\"\n      css={tempoInput}\n      onChange={(e) => handleBpm(e)}\n      onMouseDown={(e) => mouseDownBpm(e)}\n      onMouseUp={() => clearTimers()}\n      onMouseLeave={() => clearTimers()}\n      type=\"number\"\n      min={10}\n      max={500}\n      value={bpm}\n      readOnly={true}\n    />\n  );\n};\n\nexport default Tempo;\n","/** @jsx jsx */\nimport { css, jsx, SerializedStyles } from \"@emotion/core\";\nimport { IsPlaying } from \"../redux/core\";\nimport Play from \"./play\";\nimport Stop from \"./stop\";\nimport Tempo from \"./tempo\";\n\ninterface TransportControlsProps {\n  isPlaying: IsPlaying;\n  handleStartPlayback: () => void;\n  handleStopPlayback: () => void;\n  setTempo: (bpm: number) => void;\n}\n\nconst TransportControlsContainer: SerializedStyles = css`\n  display: flex;\n  width: 300px;\n  height: 75px;\n  background-color: #6e6e6e;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst TransportControlsContainerInner: SerializedStyles = css`\n  width: 175px;\n  height: 60px;\n  border: 1px solid #473d3d;\n  flex-direction: row;\n  display: flex;\n  border-radius: 5px;\n  margin-right: 5px;\n`;\n\nconst TransportControls = (props: TransportControlsProps): JSX.Element => {\n  const {\n    isPlaying,\n    handleStartPlayback,\n    handleStopPlayback,\n    setTempo,\n  } = props;\n  return (\n    <div css={TransportControlsContainer}>\n      <div css={TransportControlsContainerInner}>\n        <Play isPlaying={isPlaying} handleStartPlayback={handleStartPlayback} />\n        <Stop handleStopPlayback={handleStopPlayback} />\n      </div>\n      <Tempo setTempo={setTempo} />\n    </div>\n  );\n};\n\nexport default TransportControls;\n","/** @jsx jsx */\nimport { css, jsx, SerializedStyles } from \"@emotion/core\";\nimport { connect } from \"react-redux\";\nimport ChannelRack from \"./channel-rack\";\nimport TransportControls from \"./transport-controls\";\nimport {\n  AppState,\n  Instruments,\n  SelectBeatParams,\n  IsPlaying,\n} from \"../redux/core\";\nimport * as actionCreators from \"../redux/action-creators\";\n\nconst DRUM_MACHINE_TEXT: string = \"Drum machine\";\n\ninterface DrumFaceContainerProps {\n  instruments: Instruments;\n  isPlaying: IsPlaying;\n  handleStartPlayback: () => void;\n  handleStopPlayback: () => void;\n  handleMuteSound: (title: string) => void;\n  handleSelectBeat: (params: SelectBeatParams) => void;\n  setTempo: (bpm: number) => void;\n}\n\nconst appContainer: SerializedStyles = css`\n  text-align: center;\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\",\n    \"Ubuntu\", \"Cantarell\", \"Fira Sans\", \"Droid Sans\", \"Helvetica Neue\",\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n`;\n\nconst appHeader: SerializedStyles = css`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nconst DrumFaceContainer = (props: DrumFaceContainerProps): JSX.Element => {\n  const {\n    instruments,\n    isPlaying,\n    handleStartPlayback,\n    handleStopPlayback,\n    handleMuteSound,\n    handleSelectBeat,\n    setTempo,\n  } = props;\n  return (\n    <div css={appContainer}>\n      <header css={appHeader}>\n        <p>{DRUM_MACHINE_TEXT}</p>\n        <TransportControls\n          isPlaying={isPlaying}\n          handleStartPlayback={handleStartPlayback}\n          handleStopPlayback={handleStopPlayback}\n          setTempo={setTempo}\n        />\n        <ChannelRack\n          instruments={instruments}\n          handleMuteSound={handleMuteSound}\n          handleSelectBeat={handleSelectBeat}\n        />\n      </header>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: AppState) => {\n  return state;\n};\n\nexport default connect(mapStateToProps, actionCreators)(DrumFaceContainer);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport DrumFaceContainer from \"./components/drum-face-container\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <DrumFaceContainer />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // tslint:disable\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\"); // tslint:disable-line\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error); // tslint:disable-line\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // tslint:disable\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}